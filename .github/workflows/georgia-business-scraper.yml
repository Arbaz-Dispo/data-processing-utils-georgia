name: 🚀 Georgia Business Entity Scraper (Windows)
on:
  schedule:
    - cron: "38 * * * *"
  push:
    branches: [ master ]
  pull_request:
    branches:
  workflow_dispatch:
    inputs:
      control_number:
        description: 'Entity control number to process (e.g., "K805670")'
        required: true
        default: 'K805670'
      request_id:
        description: 'Unique request ID (for tracking requests)'
        required: false
        default: ''

jobs:
  scrape-georgia:
    runs-on: windows-latest  # Fastest Windows runner
    timeout-minutes: 10
    
    env:
      PY_COLORS: "1"
      PYTHONUNBUFFERED: 1

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        Write-Host "📦 Installing Python packages..."
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        Write-Host "✅ Dependencies installed"
    
    - name: 🌐 Verify Chrome Browser
      run: |
        Write-Host "🌐 Checking for Chrome browser..."
        
        # Check multiple possible Chrome locations
        $chromePaths = @(
          "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe",
          "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe",
          "${env:LOCALAPPDATA}\Google\Chrome\Application\chrome.exe"
        )
        
        $chromeFound = $false
        foreach ($path in $chromePaths) {
          if (Test-Path $path) {
            $chromeVersion = (Get-Item $path).VersionInfo.FileVersion
            Write-Host "✅ Found Chrome at: $path"
            Write-Host "✅ Chrome version: $chromeVersion"
            $chromeFound = $true
            break
          }
        }
        
        if (-not $chromeFound) {
          Write-Host "⚠️ Chrome not found in standard locations, checking if available in PATH..."
          try {
            $chromeVersion = & chrome --version 2>$null
            Write-Host "✅ Chrome available in PATH: $chromeVersion"
            $chromeFound = $true
          } catch {
            Write-Host "❌ Chrome not found! This may cause issues."
            Write-Host "Available programs:"
            Get-Command *chrome* -ErrorAction SilentlyContinue | Format-Table Name, Source
          }
        }
        
        if ($chromeFound) {
          Write-Host "✅ Chrome verification successful"
        }
    
    - name: 🔧 Setup SeleniumBase
      run: |
        Write-Host "🔧 Setting up SeleniumBase..."
        try {
          seleniumbase install chromedriver
          Write-Host "✅ ChromeDriver installed"
          
          seleniumbase install uc_driver
          Write-Host "✅ UC Driver installed"
          
          Write-Host "✅ SeleniumBase configured successfully"
        } catch {
          Write-Host "❌ SeleniumBase setup failed: $_"
          Write-Host "Attempting manual driver installation..."
          
          # Fallback: try manual installation
          python -c "from seleniumbase import get_driver; get_driver('chrome')" 2>$null
          Write-Host "✅ Fallback driver setup completed"
        }
    
    - name: 🧪 Quick Test
      run: |
        Write-Host "🧪 Testing SeleniumBase..."
        
        # Create test file using PowerShell
        'def test_quick(): pass' | Out-File -FilePath "test_quick.py" -Encoding UTF8
        
        try {
          pytest test_quick.py --uc -v --tb=short
          Write-Host "✅ SeleniumBase test passed"
        } catch {
          Write-Host "⚠️ SeleniumBase test failed: $_"
          Write-Host "This may indicate Chrome/driver compatibility issues"
          
          # Try a simpler test
          Write-Host "Attempting basic import test..."
          python -c "from seleniumbase import SB; print('SeleniumBase imported successfully')"
        }
    
    - name: 📋 Parse Control Number
      id: parse-control
      run: |
        $controlNumber = "${{ github.event.inputs.control_number }}"
        if ([string]::IsNullOrEmpty($controlNumber)) { $controlNumber = "K805670" }
        
        $requestId = "${{ github.event.inputs.request_id }}"
        if ([string]::IsNullOrEmpty($requestId)) {
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $requestId = "ga-win-${{ github.run_number }}-$timestamp"
        }
        
        Write-Host "Control Number: $controlNumber"
        Write-Host "Request ID: $requestId"
        
        # Set outputs for next steps using proper PowerShell syntax
        Add-Content -Path $env:GITHUB_OUTPUT -Value "control_number=$controlNumber"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "request_id=$requestId"
    
    - name: 🚀 Run Georgia Business Scraper
      env:
        CONTROL_NUMBER: ${{ steps.parse-control.outputs.control_number }}
        REQUEST_ID: ${{ steps.parse-control.outputs.request_id }}
      run: |
        Write-Host "🚀 Starting Georgia business scraper on Windows..."
        Write-Host "Control Number: $env:CONTROL_NUMBER"
        Write-Host "Request ID: $env:REQUEST_ID"
        Write-Host "Runner: Windows (no virtual display needed)"
        Write-Host "Working Directory: $(Get-Location)"
        
        # Verify script exists
        if (-not (Test-Path "windows_scraper.py")) {
          Write-Host "❌ windows_scraper.py not found in current directory"
          Write-Host "Available Python files:"
          Get-ChildItem -Filter "*.py" | Format-Table Name, Length
          exit 1
        }
        
        Write-Host "✅ Found windows_scraper.py, starting execution..."
        
        try {
          python windows_scraper.py "$env:CONTROL_NUMBER"
          Write-Host "✅ Scraper completed successfully"
        } catch {
          Write-Host "❌ Scraper failed: $_"
          Write-Host "Error details: $($Error[0])"
          exit 1
        }
    
    - name: 📁 List Generated Files
      if: always()
      run: |
        Write-Host "📁 Files in current directory:"
        Get-ChildItem -Force | Format-Table Name, Length, LastWriteTime
        
        Write-Host "`n🔍 Looking for output files..."
        
        # JSON files
        $jsonFiles = Get-ChildItem -Filter "*.json" -ErrorAction SilentlyContinue
        if ($jsonFiles) {
          Write-Host "📄 JSON files found:"
          $jsonFiles | ForEach-Object { Write-Host "  - $($_.Name) ($($_.Length) bytes)" }
        } else {
          Write-Host "📄 No JSON files found"
        }
        
        # Screenshots
        if (Test-Path "screenshots") {
          $screenshots = Get-ChildItem "screenshots" -Filter "*.png" -ErrorAction SilentlyContinue
          if ($screenshots) {
            Write-Host "📸 Screenshots: $($screenshots.Count)"
            $screenshots | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "📸 Screenshots directory exists but no PNG files found"
          }
        } else {
          Write-Host "📸 No screenshots directory"
        }
        
        # HTML dumps
        if (Test-Path "html_dumps") {
          $htmlFiles = Get-ChildItem "html_dumps" -Filter "*.html" -ErrorAction SilentlyContinue
          if ($htmlFiles) {
            Write-Host "💾 HTML dumps: $($htmlFiles.Count)"
            $htmlFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "💾 HTML dumps directory exists but no HTML files found"
          }
        } else {
          Write-Host "💾 No HTML dumps directory"
        }
    
    - name: 📦 Upload Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: georgia-results-${{ steps.parse-control.outputs.request_id }}
        path: |
          *.json
          screenshots/
          html_dumps/
        retention-days: 30
        if-no-files-found: warn
    
    - name: 📊 Display Results Summary
      if: always()
      run: |
        Write-Host "`n📊 GEORGIA SCRAPING RESULTS (WINDOWS)"
        Write-Host ("=" * 50)
        Write-Host "Control Number: ${{ steps.parse-control.outputs.control_number }}"
        Write-Host "Request ID: ${{ steps.parse-control.outputs.request_id }}"
        Write-Host "Runner: Windows Latest"
        Write-Host ("=" * 50)
        
        # Show JSON content
        $jsonFiles = Get-ChildItem -Filter "*.json" -ErrorAction SilentlyContinue
        if ($jsonFiles) {
          foreach ($file in $jsonFiles) {
            Write-Host "`n📄 Results from: $($file.Name)"
            Write-Host "📊 File size: $($file.Length) bytes"
            Write-Host "📋 Content:"
            try {
              $content = Get-Content $file.FullName -Raw -ErrorAction Stop
              Write-Host $content
            } catch {
              Write-Host "❌ Failed to read file: $_"
            }
            Write-Host ("-" * 30)
          }
        } else {
          Write-Host "❌ No JSON results found"
          Write-Host "📁 Available files:"
          Get-ChildItem | Select-Object Name, Length | Format-Table
        }
        
        Write-Host "`n🔗 Download artifacts at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
