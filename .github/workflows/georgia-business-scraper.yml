name: Georgia Business Entity Scraper
on:
  schedule:
    - cron: "38 * * * *"
  push:
    branches: [ master ]
  pull_request:
    branches:
  workflow_dispatch:
    inputs:
      control_number:
        description: 'Entity control number to process (e.g., "K805670")'
        required: true
        default: 'K805670'
      request_id:
        description: 'Unique request ID (for tracking requests)'
        required: false
        default: ''

jobs:
  build:

    env:
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set Locale
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install tzdata locales -y && sudo locale-gen en_US.UTF-8
        sudo localectl set-locale LANG="en_US.UTF-8"
        export LANG="en_US.UTF-8"
        sudo update-locale
        locale -a
        locale
        locale -c -k LC_NUMERIC
        localectl status
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install -r requirements.txt
        pip install --upgrade pyautogui
    - name: Install extra dependencies
      if: runner.os == 'Linux'
      run: |
        pip install --upgrade python-xlib
    - name: Lint with flake8
      run: |
        pip install flake8
        # Show flake8 issues but don't stop the build
        flake8 . --count --show-source --statistics --exclude=temp || true
    - name: Install Chrome
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install google-chrome-stable
    - name: Install recording tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "ðŸŽ¥ Installing ffmpeg for screen recording..."
        sudo apt-get install -y ffmpeg
        ffmpeg -version | head -n 1
        echo "âœ… Recording tools installed"
    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase
    - name: Install chromedriver
      run: |
        seleniumbase install chromedriver
        seleniumbase install uc_driver
    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc
    - name: Check which Chrome binaries exist
      run: |
        python -c "import os; print(os.path.exists('/usr/bin/google-chrome'))"
        python -c "import os; print(os.path.exists('/bin/google-chrome-stable'))"
        python -c "import os; print(os.path.exists('/bin/chromium-browser'))"
        python -c "import os; print(os.path.exists('/bin/chromium'))"
    - name: Display Chrome binary that's used
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"
    - name: Make sure pytest with sb is working
      run: |
        echo "def test_0(sb): pass" > verify_sb.py
        pytest verify_sb.py
    - name: Parse control number and setup request ID
      id: parse-control
      run: |
        CONTROL_NUMBER="${{ github.event.inputs.control_number || 'K805670' }}"
        REQUEST_ID="${{ github.event.inputs.request_id || '' }}"
        
        # Generate a fallback request ID if none provided
        if [ -z "$REQUEST_ID" ]; then
          REQUEST_ID="ga-$(date +%Y%m%d)-${{ github.run_number }}-$(date +%s)"
        fi
        
        echo "control_number=$CONTROL_NUMBER" >> $GITHUB_OUTPUT
        echo "request_id=$REQUEST_ID" >> $GITHUB_OUTPUT
        echo "Processing Georgia entity control number: $CONTROL_NUMBER with request ID: $REQUEST_ID"
    - name: Run Simple Georgia Business Scraper
      env:
        CONTROL_NUMBER: ${{ steps.parse-control.outputs.control_number }}
        REQUEST_ID: ${{ steps.parse-control.outputs.request_id }}
        PYTHONUNBUFFERED: 1
        LANG: "en_US.UTF-8"
      run: |
        echo "ðŸš€ Starting simple Georgia business scraper..."
        echo "Control Number: $CONTROL_NUMBER"
        echo "Request ID: $REQUEST_ID"
        echo "Using exact testng.py logic that works locally"
        python simple_georgia_scraper.py "$CONTROL_NUMBER"
    - name: List generated files
      if: always()
      run: |
        echo "Files in root directory:"
        ls -la
        echo "Looking for JSON files:"
        find . -name "*.json" -type f 2>/dev/null || echo "No JSON files found"
        echo "Looking for screenshots:"
        find . -name "screenshots/*.png" -type f 2>/dev/null || echo "No screenshots found"
        echo "Looking for recordings:"
        find . -name "recordings/*.mp4" -type f 2>/dev/null || echo "No recordings found"
        echo "Looking for HTML dumps:"
        find . -name "html_dumps/*.html" -type f 2>/dev/null || echo "No HTML dumps found"
    - name: Upload results as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: georgia-business-data-${{ steps.parse-control.outputs.request_id }}
        path: |
          *.json
          screenshots/
          recordings/
          html_dumps/
        retention-days: 30
        if-no-files-found: warn
    - name: Show processing summary
      if: always()
      run: |
        echo "=== GEORGIA BUSINESS PROCESSING SUMMARY ==="
        echo "Control Number: ${{ steps.parse-control.outputs.control_number }}"
        echo "Request ID: ${{ steps.parse-control.outputs.request_id }}"
        
        # Show any JSON output directly
        for file in *.json; do
          if [ -f "$file" ]; then
            echo "ðŸ“„ Found JSON file: $file"
            echo "ðŸ“Š File size: $(wc -c < "$file") bytes"
            echo "ðŸ“‹ JSON Content:"
            cat "$file"
            echo "---"
          fi
        done
        
        # Show debug files if available
        if [ -d "screenshots" ]; then
          echo "ðŸ“¸ Screenshots found: $(ls screenshots/*.png 2>/dev/null | wc -l)"
        fi
        if [ -d "recordings" ]; then
          echo "ðŸŽ¥ Recordings found:"
          ls -la recordings/
        fi
        if [ -d "html_dumps" ]; then
          echo "ðŸ’¾ HTML dumps found:"
          ls -la html_dumps/
        fi 
